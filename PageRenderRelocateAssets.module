<?php

/**
 * Page Render Relocate Assets
 *
 * ****************************************************************************
 * WARNING: this ProcessWire is a proof of concept, not something you should
 * use or even install in a production environment. See this thread for context:
 * http://processwire.com/talk/topic/4127-can-assets-folder-be-moved-to-another-domainsubdomain/
 * ****************************************************************************
 *
 * This module is a proof of concept for dynamically altering location of
 * ProcessWire assets to point to another domain and/or subdomain specifically
 * configured to serve static content.
 *
 * http://www.ravelrumba.com/blog/static-cookieless-domain/ explains why this
 * can be a good idea and how to setup such a domain yourself.
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class PageRenderRelocateAssets extends WireData implements Module, ConfigurableModule {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Relocate Assets',
			'summary' => 'Proof of concept for dynamically altering asset requests',
			'version' => 001,
			'singular' => true, 
			'autoload' => true, 
		);
	}

    /**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {

        if ($this->base_url) {
            // add a hook after each page is rendered and modify the output
            // (we only want to do this if base_url param is set, though)
            $this->addHookAfter('Page::render', $this, 'relocate'); 
        }

	}

	/**
	 * Hook into every page after it's rendered to alter asset requests.
	 *
     * @param HookEvent $event
	 */
	public function relocate(HookEvent $event) {

		$page = $event->object;

		// skip admin pages
		if ($page->template == 'admin') return;

		// modify asset requests, but only if base_url config var is set:
        if ($this->base_url) {
            $event->return = str_replace(
                "\"" . $this->config->urls->assets, 
                "\"" . rtrim($this->base_url, "/") . "/",
                $event->return
            );
        }

	}
	
    /**
     * Module configuration screen
     *
     * @param array $data
     * @return InputfieldWrapper
     */
    public static function getModuleConfigInputfields(array $data) {

        $fields = new InputfieldWrapper();

        $field = wire('modules')->get('InputfieldURL');
        $field->name = 'base_url';
        $field->label = __('Input base URL for serving your assets'); 
        if (isset($data['base_url'])) $field->value = $data['base_url'];
        $fields->add($field); 

        return $fields;
    }

}